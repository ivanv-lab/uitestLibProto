plugins {
    id 'java'
    id("io.qameta.allure") version "2.12.0"
    id 'java-library'
    id 'application'
}

group = 'org.testlib'
version = '1.0-SNAPSHOT'

configurations {
    testCompile
}

repositories {
    mavenCentral()
}

ext {
    junitPlatformVersion = '1.10.2'
    junitJupiterVersion = '5.13.0-M2'
}

dependencies {
    testImplementation(platform("org.junit:junit-bom:5.10.0"))
    testImplementation("org.junit.jupiter:junit-jupiter")
    testImplementation("org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}")
    testImplementation("org.junit.platform:junit-platform-launcher:${junitPlatformVersion}")
    testRuntimeOnly("org.junit.platform:junit-platform-commons:${junitPlatformVersion}")
    testRuntimeOnly("org.junit.platform:junit-platform-engine:${junitPlatformVersion}")
    // https://mvnrepository.com/artifact/io.qameta.allure/allure-junit5
    testImplementation("io.qameta.allure:allure-junit5:2.29.1")
    testImplementation("com.codeborne:selenide:7.8.1")
    // https://mvnrepository.com/artifact/io.rest-assured/rest-assured
    testImplementation 'io.rest-assured:rest-assured:5.5.5'
    // https://mvnrepository.com/artifact/com.opencsv/opencsv
    testImplementation 'com.opencsv:opencsv:5.11.1'
    // https://mvnrepository.com/artifact/org.postgresql/postgresql
    implementation 'org.postgresql:postgresql:42.7.7'
    // https://mvnrepository.com/artifact/com.oracle.database.jdbc/ojdbc11
    implementation 'com.oracle.database.jdbc:ojdbc11:23.8.0.25.04'
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

tasks.withType(Test){
    useJUnitPlatform()
    testLogging {
        events("passed", "skipped", "failed")
    }
    systemProperty 'systemProp.file.encoding', 'UTF-8'
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

tasks.test {
    useJUnitPlatform()
    testLogging {
        events("passed", "skipped", "failed") // Отображаем результаты тестов
    }
//    systemProperty 'allure.results.directory', "/tmp/allure-results"
    maxParallelForks=12
}

allure {
    version("2.34.0")
}

task "pb-custom-1" (type: Test){
    useJUnitPlatform {
        includeTags "pb-custom-1"
    }
}

def numberOfPB=4

for(i in 2..numberOfPB){
    def taskName="pb-custom-$i"
    def dependsOnTaskName="pb-custom-${i-1}"

    tasks.register(taskName,Test) {
        useJUnitPlatform {
            includeTags "pb-custom-$i"
        }
        dependsOn(dependsOnTaskName)
    }
}

task runAllPBCustomTasks (type: Test){
    dependsOn((1..numberOfPB).collect {"pb-custom-$it"})
}